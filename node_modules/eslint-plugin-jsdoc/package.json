{
  "author": {
    "name": "Gajus Kuizinas",
    "email": "gajus@gajus.com",
    "url": "http://gajus.com"
  },
  "bugs": {
    "url": "https://github.com/gajus/eslint-plugin-jsdoc/issues"
  },
  "dependencies": {
    "comment-parser": "^0.4.0",
    "lodash": "^4.5.1"
  },
  "description": "JSDoc linting rules for ESLint.",
  "devDependencies": {
    "babel-cli": "^6.18.0",
    "babel-plugin-add-module-exports": "^0.2.1",
    "babel-plugin-transform-flow-strip-types": "^6.18.0",
    "babel-preset-env": "^1.2.2",
    "babel-register": "^6.18.0",
    "chai": "^3.5.0",
    "eslint": "^3.10.2",
    "eslint-config-canonical": "^5.5.0",
    "gitdown": "^2.4.0",
    "globby": "^4.0.0",
    "mocha": "^2.5.3",
    "semantic-release": "^6.3.6"
  },
  "engines": {
    "node": ">=4"
  },
  "homepage": "https://github.com/gajus/eslint-plugin-jsdoc#readme",
  "keywords": [
    "eslint",
    "plugin",
    "jsdoc"
  ],
  "license": "BSD-3-Clause",
  "main": "./dist/index.js",
  "name": "eslint-plugin-jsdoc",
  "optionalDependencies": {},
  "peerDependencies": {
    "eslint": ">=0.8.0"
  },
  "readme": "<a name=\"eslint-plugin-jsdoc\"></a>\n# eslint-plugin-jsdoc\n\n[![NPM version](http://img.shields.io/npm/v/eslint-plugin-jsdoc.svg?style=flat-square)](https://www.npmjs.org/package/eslint-plugin-jsdoc)\n[![Travis build status](http://img.shields.io/travis/gajus/eslint-plugin-jsdoc/master.svg?style=flat-square)](https://travis-ci.org/gajus/eslint-plugin-jsdoc)\n[![js-canonical-style](https://img.shields.io/badge/code%20style-canonical-blue.svg?style=flat-square)](https://github.com/gajus/canonical)\n\nJSDoc linting rules for ESLint.\n\n* [eslint-plugin-jsdoc](#eslint-plugin-jsdoc)\n    * [Reference to jscs-jsdoc](#eslint-plugin-jsdoc-reference-to-jscs-jsdoc)\n    * [Installation](#eslint-plugin-jsdoc-installation)\n    * [Configuration](#eslint-plugin-jsdoc-configuration)\n    * [Settings](#eslint-plugin-jsdoc-settings)\n        * [Alias Preference](#eslint-plugin-jsdoc-settings-alias-preference)\n        * [Additional Tag Names](#eslint-plugin-jsdoc-settings-additional-tag-names)\n    * [Rules](#eslint-plugin-jsdoc-rules)\n        * [`check-param-names`](#eslint-plugin-jsdoc-rules-check-param-names)\n        * [`check-tag-names`](#eslint-plugin-jsdoc-rules-check-tag-names)\n        * [`check-types`](#eslint-plugin-jsdoc-rules-check-types)\n        * [`newline-after-description`](#eslint-plugin-jsdoc-rules-newline-after-description)\n        * [`require-description-complete-sentence`](#eslint-plugin-jsdoc-rules-require-description-complete-sentence)\n        * [`require-hyphen-before-param-description`](#eslint-plugin-jsdoc-rules-require-hyphen-before-param-description)\n        * [`require-param`](#eslint-plugin-jsdoc-rules-require-param)\n        * [`require-param-description`](#eslint-plugin-jsdoc-rules-require-param-description)\n        * [`require-param-type`](#eslint-plugin-jsdoc-rules-require-param-type)\n        * [`require-returns-description`](#eslint-plugin-jsdoc-rules-require-returns-description)\n        * [`require-returns-type`](#eslint-plugin-jsdoc-rules-require-returns-type)\n\n\n<a name=\"eslint-plugin-jsdoc-reference-to-jscs-jsdoc\"></a>\n### Reference to jscs-jsdoc\n\nThis table maps the rules between `eslint-plugin-jsdoc` and `jscs-jsdoc`.\n\n| `eslint-plugin-jsdoc` | `jscs-jsdoc` |\n| --- | --- |\n| [`check-param-names`](https://github.com/gajus/eslint-plugin-jsdoc#eslint-plugin-jsdoc-rules-check-param-names) | [`checkParamNames`](https://github.com/jscs-dev/jscs-jsdoc#checkparamnames) |\n| [`check-tag-names`](https://github.com/gajus/eslint-plugin-jsdoc#eslint-plugin-jsdoc-rules-check-tag-names) | N/A ~ [`checkAnnotations`](https://github.com/jscs-dev/jscs-jsdoc#checkannotations) |\n| [`check-types`](https://github.com/gajus/eslint-plugin-jsdoc#eslint-plugin-jsdoc-rules-check-types) | [`checkTypes`](https://github.com/jscs-dev/jscs-jsdoc#checktypes) |\n| [`newline-after-description`](https://github.com/gajus/eslint-plugin-jsdoc#eslint-plugin-jsdoc-rules-newline-after-description) | [`requireNewlineAfterDescription`](https://github.com/jscs-dev/jscs-jsdoc#requirenewlineafterdescription) and [`disallowNewlineAfterDescription`](https://github.com/jscs-dev/jscs-jsdoc#disallownewlineafterdescription) |\n| [`require-description-complete-sentence`](https://github.com/gajus/eslint-plugin-jsdoc#eslint-plugin-jsdoc-rules-require-description-complete-sentence) | [`requireDescriptionCompleteSentence`](https://github.com/jscs-dev/jscs-jsdoc#requiredescriptioncompletesentence) |\n| [`require-hyphen-before-param-description`](https://github.com/gajus/eslint-plugin-jsdoc#eslint-plugin-jsdoc-rules-require-hyphen-before-param-description) | [`requireHyphenBeforeDescription`](https://github.com/jscs-dev/jscs-jsdoc#requirehyphenbeforedescription) |\n| [`require-param`](https://github.com/gajus/eslint-plugin-jsdoc#eslint-plugin-jsdoc-rules-require-param) | [`checkParamExistence`](https://github.com/jscs-dev/jscs-jsdoc#checkparamexistence) |\n| [`require-param-description`](https://github.com/gajus/eslint-plugin-jsdoc#eslint-plugin-jsdoc-rules-require-param-description) | [`requireParamDescription`](https://github.com/jscs-dev/jscs-jsdoc#requireparamdescription) |\n| [`require-param-type`](https://github.com/gajus/eslint-plugin-jsdoc#eslint-plugin-jsdoc-rules-require-param-type) | [`requireParamTypes`](https://github.com/jscs-dev/jscs-jsdoc#requireparamtypes) |\n| [`require-returns-description`](https://github.com/gajus/eslint-plugin-jsdoc#eslint-plugin-jsdoc-rules-require-returns-description) | [`requireReturnDescription`](https://github.com/jscs-dev/jscs-jsdoc#requirereturndescription) |\n| [`require-returns-type`](https://github.com/gajus/eslint-plugin-jsdoc#eslint-plugin-jsdoc-rules-require-returns-type) | [`requireReturnTypes`](https://github.com/jscs-dev/jscs-jsdoc#requirereturntypes) |\n| N/A | [`checkReturnTypes`](https://github.com/jscs-dev/jscs-jsdoc#checkreturntypes) |\n| N/A | [`checkRedundantParams`](https://github.com/jscs-dev/jscs-jsdoc#checkredundantparams) |\n| N/A | [`checkReturnTypes`](https://github.com/jscs-dev/jscs-jsdoc#checkreturntypes) |\n| N/A | [`checkRedundantAccess`](https://github.com/jscs-dev/jscs-jsdoc#checkredundantaccess) |\n| N/A | [`enforceExistence`](https://github.com/jscs-dev/jscs-jsdoc#enforceexistence) |\n| N/A | [`leadingUnderscoreAccess`](https://github.com/jscs-dev/jscs-jsdoc#leadingunderscoreaccess) |\n\n<a name=\"eslint-plugin-jsdoc-installation\"></a>\n## Installation\n\nInstall [ESLint](https://www.github.com/eslint/eslint) either locally or globally.\n\n```sh\nnpm install eslint\n```\n\nIf you have installed `ESLint` globally, you have to install JSDoc plugin globally too. Otherwise, install it locally.\n\n```sh\nnpm install eslint-plugin-jsdoc\n```\n\n<a name=\"eslint-plugin-jsdoc-configuration\"></a>\n## Configuration\n\nAdd `plugins` section and specify `eslint-plugin-jsdoc` as a plugin.\n\n```json\n{\n    \"plugins\": [\n        \"jsdoc\"\n    ]\n}\n```\n\nFinally, enable all of the rules that you would like to use.\n\n```json\n{\n    \"rules\": {\n        \"jsdoc/check-param-names\": 1,\n        \"jsdoc/check-tag-names\": 1,\n        \"jsdoc/check-types\": 1,\n        \"jsdoc/newline-after-description\": 1,\n        \"jsdoc/require-description-complete-sentence\": 1,\n        \"jsdoc/require-hyphen-before-param-description\": 1,\n        \"jsdoc/require-param\": 1,\n        \"jsdoc/require-param-description\": 1,\n        \"jsdoc/require-param-type\": 1,\n        \"jsdoc/require-returns-description\": 1,\n        \"jsdoc/require-returns-type\": 1\n    }\n}\n```\n\n<a name=\"eslint-plugin-jsdoc-settings\"></a>\n## Settings\n\n<a name=\"eslint-plugin-jsdoc-settings-alias-preference\"></a>\n### Alias Preference\n\nUse `settings.jsdoc.tagNamePreference` to configure a preferred alias name for a JSDoc tag. The format of the configuration is: `<primary tag name>: <preferred alias name>`, e.g.\n\n```json\n{\n    \"rules\": {},\n    \"settings\": {\n        \"jsdoc\": {\n            \"tagNamePreference\": {\n                \"param\": \"arg\",\n                \"returns\": \"return\"\n            }\n        }\n    }\n}\n```\n\n\n<a name=\"eslint-plugin-jsdoc-settings-additional-tag-names\"></a>\n### Additional Tag Names\n\nUse `settings.jsdoc.additionalTagNames` to configure additional, allowed JSDoc tags. The format of the configuration is as follows:\n\n```json\n{\n    \"rules\": {},\n    \"settings\": {\n        \"jsdoc\": {\n            \"additionalTagNames\": {\n                \"customTags\": [\"define\", \"extends\", \"record\"]\n            }\n        }\n    }\n}\n```\n\n<a name=\"eslint-plugin-jsdoc-rules\"></a>\n## Rules\n\n<a name=\"eslint-plugin-jsdoc-rules-check-param-names\"></a>\n### <code>check-param-names</code>\n\nEnsures that parameter names in JSDoc match those in the function declaration.\n\n|||\n|---|---|\n|Context|`ArrowFunctionExpression`, `FunctionDeclaration`, `FunctionExpression`|\n|Tags|`param`|\n\nThe following patterns are considered problems:\n\n```js\n/**\n * @param Foo\n */\nfunction quux (foo = 'FOO') {\n\n}\n// Message: Expected @param names to be \"foo\". Got \"Foo\".\n\n/**\n * @arg Foo\n */\nfunction quux (foo = 'FOO') {\n\n}\n// Message: Expected @arg names to be \"foo\". Got \"Foo\".\n\n/**\n * @param Foo\n */\nfunction quux (foo) {\n\n}\n// Message: Expected @param names to be \"foo\". Got \"Foo\".\n\n/**\n * @param Foo.Bar\n */\nfunction quux (foo) {\n\n}\n// Message: @param path declaration (\"Foo.Bar\") appears before any real parameter.\n\n/**\n * @param foo\n * @param Foo.Bar\n */\nfunction quux (foo) {\n\n}\n// Message: @param path declaration (\"Foo.Bar\") root node name (\"Foo\") does not match previous real parameter name (\"foo\").\n\n/**\n * @param foo\n * @param foo.bar\n * @param bar\n */\nfunction quux (bar, foo) {\n\n}\n// Message: Expected @param names to be \"bar, foo\". Got \"foo, bar\".\n\n/**\n * @param foo\n * @param bar\n */\nfunction quux (foo) {\n\n}\n// Message: @param \"bar\" does not match an existing function parameter.\n```\n\nThe following patterns are not considered problems:\n\n```js\n/**\n *\n */\nfunction quux (foo) {\n\n}\n\n/**\n * @param foo\n */\nfunction quux (foo) {\n\n}\n\n/**\n * @param foo\n * @param bar\n */\nfunction quux (foo, bar) {\n\n}\n\n/**\n * @param foo\n * @param bar\n */\nfunction quux (foo, bar, baz) {\n\n}\n\n/**\n * @param foo\n * @param foo.foo\n * @param bar\n */\nfunction quux (foo, bar) {\n\n}\n\n/**\n * @param args\n */\nfunction quux (...args) {\n\n}\n\n/**\n * @param foo\n */\nfunction quux ({a, b}) {\n\n}\n```\n\n\n<a name=\"eslint-plugin-jsdoc-rules-check-param-names-deconstructing-function-parameter\"></a>\n#### Deconstructing Function Parameter\n\n`eslint-plugin-jsdoc` does not validate names of parameters in function deconstruction, e.g.\n\n```js\n/**\n * @param foo\n */\nfunction quux ({\n    a,\n    b\n}) {\n\n}\n```\n\n`{a, b}` is an [`ObjectPattern`](https://github.com/estree/estree/blob/master/es6.md#objectpattern) AST type and does not have a name. Therefore, the associated parameter in JSDoc block can have any name.\n\n<a name=\"eslint-plugin-jsdoc-rules-check-tag-names\"></a>\n### <code>check-tag-names</code>\n\nReports invalid block tag names.\n\nValid [JSDoc 3 Block Tags](http://usejsdoc.org/#block-tags) are:\n\n```\nabstract\naccess\nalias\naugments\nauthor\nborrows\ncallback\nclass\nclassdesc\nconstant\nconstructs\ncopyright\ndefault\ndeprecated\ndescription\nenum\nevent\nexample\nexports\nexternal\nfile\nfires\nfunction\nglobal\nignore\nimplements\ninheritdoc\ninner\ninstance\ninterface\nkind\nlends\nlicense\nlistens\nmember\nmemberof\nmixes\nmixin\nmodule\nname\nnamespace\noverride\nparam\nprivate\nproperty\nprotected\npublic\nreadonly\nrequires\nreturns\nsee\nsince\nstatic\nsummary\nthis\nthrows\ntodo\ntutorial\ntype\ntypedef\nvariation\nversion\n```\n\n|||\n|---|---|\n|Context|`ArrowFunctionExpression`, `FunctionDeclaration`, `FunctionExpression`|\n|Tags|N/A|\n\nThe following patterns are considered problems:\n\n```js\n/**\n * @Param\n */\nfunction quux () {\n\n}\n// Message: Invalid JSDoc tag name \"Param\".\n\n/**\n * @foo\n */\nfunction quux () {\n\n}\n// Message: Invalid JSDoc tag name \"foo\".\n\n/**\n * @arg foo\n */\nfunction quux (foo) {\n\n}\n// Message: Invalid JSDoc tag (preference). Replace \"arg\" JSDoc tag with \"param\".\n\n/**\n * @param foo\n */\nfunction quux (foo) {\n\n}\n// Message: Invalid JSDoc tag (preference). Replace \"param\" JSDoc tag with \"arg\".\n\n/**\n * @bar foo\n */\nfunction quux (foo) {\n\n}\n// Message: Invalid JSDoc tag name \"bar\".\n\n/**\n * @baz @bar foo\n */\nfunction quux (foo) {\n\n}\n// Message: Invalid JSDoc tag name \"baz\".\n\n/**\n * @bar\n * @baz\n */\nfunction quux (foo) {\n\n}\n// Message: Invalid JSDoc tag name \"baz\".\n```\n\nThe following patterns are not considered problems:\n\n```js\n/**\n * @param foo\n */\nfunction quux (foo) {\n\n}\n\n/**\n * @arg foo\n */\nfunction quux (foo) {\n\n}\n\n/**\n * @bar foo\n */\nfunction quux (foo) {\n\n}\n\n/**\n * @baz @bar foo\n */\nfunction quux (foo) {\n\n}\n\n/** \n * @abstract\n * @access\n * @alias\n * @augments\n * @author\n * @borrows\n * @callback\n * @class\n * @classdesc\n * @constant\n * @constructs\n * @copyright\n * @default\n * @deprecated\n * @description\n * @enum\n * @event\n * @example\n * @exports\n * @external\n * @file\n * @fires\n * @function\n * @global\n * @ignore\n * @implements\n * @inheritdoc\n * @inner\n * @instance\n * @interface\n * @kind\n * @lends\n * @license\n * @listens\n * @member\n * @memberof\n * @mixes\n * @mixin\n * @module\n * @name\n * @namespace\n * @override\n * @param\n * @private\n * @property\n * @protected\n * @public\n * @readonly\n * @requires\n * @returns\n * @see\n * @since\n * @static\n * @summary\n * @this\n * @throws\n * @todo\n * @tutorial\n * @type\n * @typedef\n * @variation\n * @version\n */\nfunction quux (foo) {}\n```\n\n\n<a name=\"eslint-plugin-jsdoc-rules-check-types\"></a>\n### <code>check-types</code>\n\nReports invalid types.\n\nEnsures that case of native types is the same as in this list:\n\n```\nboolean\nnumber\nstring\nObject\nArray\nDate\nRegExp\n```\n\n<a name=\"eslint-plugin-jsdoc-rules-check-types-why-not-capital-case-everything\"></a>\n#### Why not capital case everything?\n\nWhy are `boolean`, `number` and `string` exempt from starting with a capital letter? Let's take `string` as an example. In Javascript, everything is an object. The string Object has prototypes for string functions such as `.toUpperCase()`. \n\nFortunately we don't have to write `new String()` everywhere in our code. Javascript will automatically wrap string primitives into string Objects when we're applying a string function to a string primitive. This way the memory footprint is a tiny little bit smaller, and the [GC](https://en.wikipedia.org/wiki/Garbage_collection_(computer_science)) has less work to do. \n\nSo in a sense, there two types of strings in Javascript; `{string}` literals, also called primitives and `{String}` Objects. We use the primitives because it's easier to write and uses less memory. `{String}` and `{string}` are technically both valid, but they are not the same.\n\n```js\nnew String('lard') // String {0: \"l\", 1: \"a\", 2: \"r\", 3: \"d\", length: 4}\n'lard' // \"lard\"\nnew String('lard') === 'lard' // false\n```\n\nTo make things more confusing, there are also object literals and object Objects. But object literals are still static Objects and object Objects are instantiated Objects. So an object primitive is still an object Object.\n\nBasically, for primitives, we want to define the type as a primitive, because that's what we use in 99.9% of cases. For everything else, we use the type rather than the primitive. Otherwise it would all just be `{object}`.\n\nIn short: It's not about consistency, rather about the 99.9% use case.\n\ntype name | `typeof` | check-types | testcase\n--|--|--|--\n**Object** | object | **Object** | `({}) instanceof Object` -> `true`\n**Array** | object | **Array** | `([]) instanceof Array` -> `true`\n**Date** | object | **Date** | `(new Date()) instanceof Date` -> `true`\n**RegExp** | object | **RegExp** | `(new RegExp(/.+/)) instanceof RegExp` -> `true`\nBoolean | **boolean** | **boolean** | `(true) instanceof Boolean` -> **`false`**\nNumber | **number** | **number** | `(41) instanceof Number` -> **`false`**\nString | **string** | **string** | `(\"test\") instanceof String` -> **`false`**\n\n|||\n|---|---|\n|Context|`ArrowFunctionExpression`, `FunctionDeclaration`, `FunctionExpression`|\n|Tags|`class`, `constant`, `enum`, `member`, `module`, `namespace`, `param`, `property`, `returns`, `throws`, `type`, `typedef`|\n\nThe following patterns are considered problems:\n\n```js\n/**\n * @param {Number} foo\n */\nfunction quux (foo) {\n\n}\n// Message: Invalid JSDoc @param \"foo\" type \"Number\".\n\n/**\n * @arg {Number} foo\n */\nfunction quux (foo) {\n\n}\n// Message: Invalid JSDoc @arg \"foo\" type \"Number\".\n```\n\nThe following patterns are not considered problems:\n\n```js\n/**\n * @param {number} foo\n * @param {Bar} bar\n * @param {*} baz\n */\nfunction quux (foo, bar, baz) {\n\n}\n\n/**\n * @arg {number} foo\n * @arg {Bar} bar\n * @arg {*} baz\n */\nfunction quux (foo, bar, baz) {\n\n}\n```\n\n\n<a name=\"eslint-plugin-jsdoc-rules-newline-after-description\"></a>\n### <code>newline-after-description</code>\n\nEnforces a consistent padding of the block description.\n\nThis rule takes one argument. If it is `\"always\"` then a problem is raised when there is a newline after the description. If it is `\"never\"` then a problem is raised when there is no newline after the description. The default value is `\"always\"`.\n\n|||\n|---|---|\n|Context|`ArrowFunctionExpression`, `FunctionDeclaration`, `FunctionExpression`|\n|Tags|N/A|\n\nThe following patterns are considered problems:\n\n```js\n/**\n * Foo.\n *\n * Foo.\n * @foo\n */\nfunction quux () {\n\n}\n// Options: [\"always\"]\n// Message: There must be a newline after the description of the JSDoc block.\n\n/**\n * Bar.\n *\n * Bar.\n *\n * @bar\n */\nfunction quux () {\n\n}\n// Options: [\"never\"]\n// Message: There must be no newline after the description of the JSDoc block.\n```\n\nThe following patterns are not considered problems:\n\n```js\n/**\n * Foo.\n */\nfunction quux () {\n\n}\n// Options: [\"always\"]\n\n/**\n * Bar.\n */\nfunction quux () {\n\n}\n// Options: [\"never\"]\n\n/**\n * Foo.\n *\n * @foo\n */\nfunction quux () {\n\n}\n// Options: [\"always\"]\n\n/**\n * Bar.\n * @bar\n */\nfunction quux () {\n\n}\n// Options: [\"never\"]\n```\n\n\n<a name=\"eslint-plugin-jsdoc-rules-require-description-complete-sentence\"></a>\n### <code>require-description-complete-sentence</code>\n\nRequires that block description and tag description are written in complete sentences, i.e.,\n\n* Description must start with an uppercase alphabetical character.\n* Paragraph must start with an uppercase alphabetical character.\n* Sentences must end with a period.\n* Every line that starts with a lowercase character must be preceded by a line ending the sentence.\n\n|||\n|---|---|\n|Context|`ArrowFunctionExpression`, `FunctionDeclaration`, `FunctionExpression`|\n|Tags|`param`, `returns`|\n\nThe following patterns are considered problems:\n\n```js\n/**\n * foo.\n */\nfunction quux () {\n\n}\n// Message: Description must start with an uppercase character.\n\n/**\n * Foo.\n *\n * foo.\n */\nfunction quux () {\n\n}\n// Message: Paragraph must start with an uppercase character.\n\n/**\n * Foo\n */\nfunction quux () {\n\n}\n// Message: Sentence must end with a period.\n\n/**\n * Foo\n * Bar.\n */\nfunction quux () {\n\n}\n// Message: A line of text is started with an uppercase character, but preceding line does not end the sentence.\n\n/**\n * Foo.\n *\n * @param foo foo.\n */\nfunction quux (foo) {\n\n}\n// Message: Description must start with an uppercase character.\n\n/**\n * Foo.\n *\n * @returns foo.\n */\nfunction quux (foo) {\n\n}\n// Message: Description must start with an uppercase character.\n```\n\nThe following patterns are not considered problems:\n\n```js\n/**\n * @param foo - Foo.\n */\nfunction quux () {\n\n}\n\n/**\n * Foo.\n */\nfunction quux () {\n\n}\n\n/**\n * Foo.\n * Bar.\n */\nfunction quux () {\n\n}\n\n/**\n * Foo.\n *\n * Bar.\n */\nfunction quux () {\n\n}\n\n/**\n * Foo\n * bar.\n */\nfunction quux () {\n\n}\n\n/**\n * @returns Foo bar.\n */\nfunction quux () {\n\n}\n```\n\n\n<a name=\"eslint-plugin-jsdoc-rules-require-hyphen-before-param-description\"></a>\n### <code>require-hyphen-before-param-description</code>\n\nRequires a hyphen before the `@param` description.\n\n|||\n|---|---|\n|Context|`ArrowFunctionExpression`, `FunctionDeclaration`, `FunctionExpression`|\n|Tags|`param`|\n\nThe following patterns are considered problems:\n\n```js\n/**\n * @param foo Foo.\n */\nfunction quux () {\n\n}\n// Message: There must be a hyphen before @param description.\n```\n\nThe following patterns are not considered problems:\n\n```js\n/**\n * @param foo - Foo.\n */\nfunction quux () {\n\n}\n```\n\n\n<a name=\"eslint-plugin-jsdoc-rules-require-param\"></a>\n### <code>require-param</code>\n\nRequires that all function parameters are documented.\n\n|||\n|---|---|\n|Context|`ArrowFunctionExpression`, `FunctionDeclaration`, `FunctionExpression`|\n|Tags|`param`|\n\nThe following patterns are considered problems:\n\n```js\n/**\n *\n */\nfunction quux (foo) {\n\n}\n// Message: Missing JSDoc @param \"foo\" declaration.\n\n/**\n *\n */\nfunction quux (foo) {\n\n}\n// Message: Missing JSDoc @arg \"foo\" declaration.\n\n/**\n * @param foo\n */\nfunction quux (foo, bar) {\n\n}\n// Message: Missing JSDoc @param \"bar\" declaration.\n```\n\nThe following patterns are not considered problems:\n\n```js\n/**\n * @param foo\n */\nfunction quux (foo) {\n\n}\n\n/**\n * @inheritdoc\n */\nfunction quux (foo) {\n\n}\n\n/**\n * @arg foo\n */\nfunction quux (foo) {\n\n}\n```\n\n\n<a name=\"eslint-plugin-jsdoc-rules-require-param-description\"></a>\n### <code>require-param-description</code>\n\nRequires that `@param` tag has `description` value.\n\n|||\n|---|---|\n|Context|`ArrowFunctionExpression`, `FunctionDeclaration`, `FunctionExpression`|\n|Tags|`param`|\n\nThe following patterns are considered problems:\n\n```js\n/**\n * @param foo\n */\nfunction quux (foo) {\n\n}\n// Message: Missing JSDoc @param \"foo\" description.\n\n/**\n * @arg foo\n */\nfunction quux (foo) {\n\n}\n// Message: Missing JSDoc @arg \"foo\" description.\n```\n\nThe following patterns are not considered problems:\n\n```js\n/**\n *\n */\nfunction quux (foo) {\n\n}\n\n/**\n * @param foo Foo.\n */\nfunction quux (foo) {\n\n}\n```\n\n\n<a name=\"eslint-plugin-jsdoc-rules-require-param-type\"></a>\n### <code>require-param-type</code>\n\nRequires that `@param` tag has `type` value.\n\n|||\n|---|---|\n|Context|`ArrowFunctionExpression`, `FunctionDeclaration`, `FunctionExpression`|\n|Tags|`param`|\n\nThe following patterns are considered problems:\n\n```js\n/**\n * @param foo\n */\nfunction quux (foo) {\n\n}\n// Message: Missing JSDoc @param \"foo\" type.\n\n/**\n * @arg foo\n */\nfunction quux (foo) {\n\n}\n// Message: Missing JSDoc @arg \"foo\" type.\n```\n\nThe following patterns are not considered problems:\n\n```js\n/**\n *\n */\nfunction quux (foo) {\n\n}\n\n/**\n * @param {number} foo\n */\nfunction quux (foo) {\n\n}\n```\n\n\n<a name=\"eslint-plugin-jsdoc-rules-require-returns-description\"></a>\n### <code>require-returns-description</code>\n\nRequires that `@returns` tag has `description` value.\n\n|||\n|---|---|\n|Context|`ArrowFunctionExpression`, `FunctionDeclaration`, `FunctionExpression`|\n|Tags|`returns`|\n\nThe following patterns are considered problems:\n\n```js\n/**\n * @returns\n */\nfunction quux (foo) {\n\n}\n// Message: Missing JSDoc @returns description.\n\n/**\n * @return\n */\nfunction quux (foo) {\n\n}\n// Message: Missing JSDoc @return description.\n```\n\nThe following patterns are not considered problems:\n\n```js\n/**\n *\n */\nfunction quux () {\n\n}\n\n/**\n * @returns Foo.\n */\nfunction quux () {\n\n}\n```\n\n\n<a name=\"eslint-plugin-jsdoc-rules-require-returns-type\"></a>\n### <code>require-returns-type</code>\n\nRequires that `@returns` tag has `type` value.\n\n|||\n|---|---|\n|Context|`ArrowFunctionExpression`, `FunctionDeclaration`, `FunctionExpression`|\n|Tags|`returns`|\n\nThe following patterns are considered problems:\n\n```js\n/**\n * @returns\n */\nfunction quux () {\n\n}\n// Message: Missing JSDoc @returns type.\n\n/**\n * @returns Foo.\n */\nfunction quux () {\n\n}\n// Message: Missing JSDoc @returns type.\n\n/**\n * @return Foo.\n */\nfunction quux () {\n\n}\n// Message: Missing JSDoc @return type.\n```\n\nThe following patterns are not considered problems:\n\n```js\n/**\n * @returns {number}\n */\nfunction quux () {\n\n}\n```\n\n\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/gajus/eslint-plugin-jsdoc.git"
  },
  "scripts": {
    "add-assertions": "babel-node --presets es2015 ./bin/readme-assertions",
    "build": "NODE_ENV=production babel ./src --out-dir ./dist --copy-files --source-maps",
    "generate-readme": "gitdown ./.README/README.md --output-file ./README.md && npm run add-assertions",
    "lint": "eslint ./src ./test",
    "test": "mocha --compilers js:babel-register"
  },
  "version": "3.0.2"
}