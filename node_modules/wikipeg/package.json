{
  "bin": {
    "wikipeg": "bin/wikipeg"
  },
  "contributors": [
    {
      "name": "David Majda",
      "email": "david@majda.cz",
      "url": "http://majda.cz/"
    },
    {
      "name": "Tim Starling",
      "email": "tstarling@wikimedia.org"
    }
  ],
  "dependencies": {},
  "description": "Parser generator for JavaScript and PHP",
  "devDependencies": {
    "eslint": "= 5.14.1",
    "jasmine-node": "= 1.11.0",
    "uglify-js": "= 2.4.7"
  },
  "engines": {
    "node": ">= 6.0.0"
  },
  "files": [
    "CHANGELOG.md",
    "LICENSE",
    "README.md",
    "VERSION",
    "bin/wikipeg",
    "examples/*.pegjs",
    "examples/*.pegphp",
    "lib/**/*.js",
    "lib/**/*.php",
    "src/**/*.php",
    "tools/build-browser.js",
    "package.json"
  ],
  "homepage": "https://gerrit.wikimedia.org/r/plugins/gitiles/wikipeg/",
  "license": "MIT",
  "main": "lib/peg",
  "name": "wikipeg",
  "optionalDependencies": {},
  "readme": "WikiPEG\n======\n\nWikiPEG is a recursive descent parser generator for Node.js, intended mostly\nto support Parsoid's complex needs. It is a fork of PEG.js with a new backend.\n\nFeatures\n--------\n\n  * Simple and expressive grammar syntax\n  * Integrates both lexical and syntactical analysis\n  * Parsers have excellent error reporting out of the box\n  * Based on [parsing expression grammar](http://en.wikipedia.org/wiki/Parsing_expression_grammar)\n    formalism — more powerful than traditional LL(*k*) and LR(*k*) parsers\n\nInstallation\n------------\n\n### Node.js\n\nTo use the `wikipeg` command, install WikiPEG globally:\n\n    $ npm install -g wikipeg\n\nTo use the JavaScript API, install WikiPEG locally:\n\n    $ npm install wikipeg\n\nIf you need both the `wikipeg` command and the JavaScript API, install WikiPEG both\nways.\n\nGenerating a Parser\n-------------------\n\nWikiPEG generates parser from a grammar that describes expected input and can\nspecify what the parser returns (using semantic actions on matched parts of the\ninput). Generated parser itself is a JavaScript object with a simple API.\n\n### Command Line\n\nTo generate a parser from your grammar, use the `wikipeg` command:\n\n    $ wikipeg arithmetics.pegjs\n\nThis writes parser source code into a file with the same name as the grammar\nfile but with “.js” extension. You can also specify the output file explicitly:\n\n    $ wikipeg arithmetics.pegjs arithmetics-parser.js\n\nIf you omit both input and output file, standard input and output are used.\n\nBy default, the parser object is assigned to `module.exports`, which makes the\noutput a Node.js module. You can assign it to another variable by passing a\nvariable name using the `-e`/`--export-var` option. This may be helpful if you\nwant to use the parser in browser environment.\n\nYou can tweak the generated parser with several options:\n\n  * `--cache` — makes the parser cache results, avoiding exponential parsing\n    time in pathological cases but making the parser slower\n  * `--allowed-start-rules` — comma-separated list of rules the parser will be\n    allowed to start parsing from (default: the first rule in the grammar)\n  * `--plugin` — makes WikiPEG use a specified plugin (can be specified multiple\n    times)\n  * `--extra-options` — additional options (in JSON format) to pass to\n    `PEG.buildParser`\n  * `--extra-options-file` — file with additional options (in JSON format) to\n    pass to `PEG.buildParser`\n  * `--trace` — makes the parser trace its progress\n\n### JavaScript API\n\nIn Node.js, require the WikiPEG parser generator module:\n\n    var PEG = require(\"wikipeg\");\n\nIn browser, include the WikiPEG library in your web page or application using the\n`<script>` tag. The API will be available in the `PEG` global object.\n\nTo generate a parser, call the `PEG.buildParser` method and pass your grammar as\na parameter:\n\n    var parser = PEG.buildParser(\"start = ('a' / 'b')+\");\n\nThe method will return generated parser object or its source code as a string\n(depending on the value of the `output` option — see below). It will throw an\nexception if the grammar is invalid. The exception will contain `message`\nproperty with more details about the error.\n\nYou can tweak the generated parser by passing a second parameter with an options\nobject to `PEG.buildParser`. The following options are supported:\n\n  * `cache` — if `true`, makes the parser cache results, avoiding exponential\n    parsing time in pathological cases but making the parser slower (default:\n    `false`)\n  * `allowedStartRules` — rules the parser will be allowed to start parsing from\n    (default: the first rule in the grammar)\n  * `output` — if set to `\"parser\"`, the method will return generated parser\n    object; if set to `\"source\"`, it will return parser source code as a string\n    (default: `\"parser\"`)\n  * `optimize`— selects between optimizing the generated parser for parsing\n    speed (`\"speed\"`) or code size (`\"size\"`) (default: `\"speed\"`)\n  * `plugins` — plugins to use\n\nUsing the Parser\n----------------\n\nUsing the generated parser is simple — just call its `parse` method and pass an\ninput string as a parameter. The method will return a parse result (the exact\nvalue depends on the grammar used to build the parser) or throw an exception if\nthe input is invalid. The exception will contain `location`, `expected`, `found`\nand `message` properties with more details about the error.\n\n    parser.parse(\"abba\"); // returns [\"a\", \"b\", \"b\", \"a\"]\n\n    parser.parse(\"abcd\"); // throws an exception\n\nYou can tweak parser behavior by passing a second parameter with an options\nobject to the `parse` method. The following options are supported:\n\n  * `startRule` — name of the rule to start parsing from\n  * `tracer` — tracer to use\n\nParsers can also support their own custom options.\n\nGrammar Syntax and Semantics\n----------------------------\n\nThe grammar syntax is similar to JavaScript in that it is not line-oriented and\nignores whitespace between tokens. You can also use JavaScript-style comments\n(`// ...` and `/* ... */`).\n\nLet's look at example grammar that recognizes simple arithmetic expressions like\n`2*(3+4)`. A parser generated from this grammar computes their values.\n\n    start\n      = additive\n\n    additive\n      = left:multiplicative \"+\" right:additive { return left + right; }\n      / multiplicative\n\n    multiplicative\n      = left:primary \"*\" right:multiplicative { return left * right; }\n      / primary\n\n    primary\n      = integer\n      / \"(\" additive:additive \")\" { return additive; }\n\n    integer \"integer\"\n      = digits:[0-9]+ { return parseInt(digits.join(\"\"), 10); }\n\nOn the top level, the grammar consists of *rules* (in our example, there are\nfive of them). Each rule has a *name* (e.g. `integer`) that identifies the rule,\nand a *parsing expression* (e.g. `digits:[0-9]+ { return\nparseInt(digits.join(\"\"), 10); }`) that defines a pattern to match against the\ninput text and possibly contains some JavaScript code that determines what\nhappens when the pattern matches successfully. A rule can also contain\n*human-readable name* that is used in error messages (in our example, only the\n`integer` rule has a human-readable name). The parsing starts at the first rule,\nwhich is also called the *start rule*.\n\nA rule name must be a JavaScript identifier. It is followed by an equality sign\n(“=”) and a parsing expression. If the rule has a human-readable name, it is\nwritten as a JavaScript string between the name and separating equality sign.\nRules need to be separated only by whitespace (their beginning is easily\nrecognizable), but a semicolon (“;”) after the parsing expression is allowed.\n\nThe first rule can be preceded by an *initializer* — a piece of JavaScript code\nin curly braces (“{” and “}”). This code is executed before the generated parser\nstarts parsing. All variables and functions defined in the initializer are\naccessible in rule actions and semantic predicates. The code inside the\ninitializer can access the parser object using the `parser` variable and options\npassed to the parser using the `options` variable. Curly braces in the\ninitializer code must be balanced. Let's look at the example grammar from above\nusing a simple initializer.\n\n    {\n      function makeInteger(o) {\n        return parseInt(o.join(\"\"), 10);\n      }\n    }\n\n    start\n      = additive\n\n    additive\n      = left:multiplicative \"+\" right:additive { return left + right; }\n      / multiplicative\n\n    multiplicative\n      = left:primary \"*\" right:multiplicative { return left * right; }\n      / primary\n\n    primary\n      = integer\n      / \"(\" additive:additive \")\" { return additive; }\n\n    integer \"integer\"\n      = digits:[0-9]+ { return makeInteger(digits); }\n\nThe parsing expressions of the rules are used to match the input text to the\ngrammar. There are various types of expressions — matching characters or\ncharacter classes, indicating optional parts and repetition, etc. Expressions\ncan also contain references to other rules. See detailed description below.\n\nIf an expression successfully matches a part of the text when running the\ngenerated parser, it produces a *match result*, which is a JavaScript value. For\nexample:\n\n  * An expression matching a literal string produces a JavaScript string\n    containing matched part of the input.\n  * An expression matching repeated occurrence of some subexpression produces a\n    JavaScript array with all the matches.\n\nThe match results propagate through the rules when the rule names are used in\nexpressions, up to the start rule. The generated parser returns start rule's\nmatch result when parsing is successful.\n\nOne special case of parser expression is a *parser action* — a piece of\nJavaScript code inside curly braces (“{” and “}”) that takes match results of\nsome of the the preceding expressions and returns a JavaScript value. This value\nis considered match result of the preceding expression (in other words, the\nparser action is a match result transformer).\n\nIn our arithmetics example, there are many parser actions. Consider the action\nin expression `digits:[0-9]+ { return parseInt(digits.join(\"\"), 10); }`. It\ntakes the match result of the expression [0-9]+, which is an array of strings\ncontaining digits, as its parameter. It joins the digits together to form a\nnumber and converts it to a JavaScript `number` object.\n\n### Parsing Expression Types\n\nThere are several types of parsing expressions, some of them containing\nsubexpressions and thus forming a recursive structure:\n\n#### \"*literal*\"<br>'*literal*'\n\nMatch exact literal string and return it. The string syntax is the same as in\nJavaScript. Appending `i` right after the literal makes the match\ncase-insensitive.\n\n#### .\n\nMatch exactly one character and return it as a string.\n\n#### [*characters*]\n\nMatch one character from a set and return it as a string. The characters in the\nlist can be escaped in exactly the same way as in JavaScript string. The list of\ncharacters can also contain ranges (e.g. `[a-z]` means “all lowercase letters”).\nPreceding the characters with `^` inverts the matched set (e.g. `[^a-z]` means\n“all character but lowercase letters”). Appending `i` right after the right\nbracket makes the match case-insensitive.\n\n#### *rule*\n\nMatch a parsing expression of a rule recursively and return its match result.\n\n#### ( *expression* )\n\nMatch a subexpression and return its match result.\n\n#### *expression* \\*\n\nMatch zero or more repetitions of the expression and return their match results\nin an array. The matching is greedy, i.e. the parser tries to match the\nexpression as many times as possible.\n\n#### *expression* +\n\nMatch one or more repetitions of the expression and return their match results\nin an array. The matching is greedy, i.e. the parser tries to match the\nexpression as many times as possible.\n\n#### *expression* ?\n\nTry to match the expression. If the match succeeds, return its match result,\notherwise return `null`.\n\n#### & *expression*\n\nTry to match the expression. If the match succeeds, just return `undefined` and\ndo not advance the parser position, otherwise consider the match failed.\n\n#### ! *expression*\n\nTry to match the expression. If the match does not succeed, just return\n`undefined` and do not advance the parser position, otherwise consider the match\nfailed.\n\n#### & { *predicate* }\n\nThe predicate is a piece of JavaScript code that is executed as if it was inside\na function. It gets the match results of labeled expressions in preceding\nexpression as its arguments. It should return some JavaScript value using the\n`return` statement. If the returned value evaluates to `true` in boolean\ncontext, just return `undefined` and do not advance the parser position;\notherwise consider the match failed.\n\nThe code inside the predicate can access all variables and functions defined in\nthe initializer at the beginning of the grammar.\n\nThe code inside the predicate can also access location information using the\n`location` function. It returns an object like this:\n\n    {\n      start: { offset: 23, line: 5, column: 6 },\n      end:   { offset: 23, line: 5, column: 6 }\n    }\n\nThe `start` and `end` properties both refer to the current parse position. The\n`offset` property contains an offset as a zero-based index and `line` and\n`column` properties contain a line and a column as one-based indices.\n\nThe code inside the predicate can also access the parser object using the\n`parser` variable and options passed to the parser using the `options` variable.\n\nNote that curly braces in the predicate code must be balanced.\n\n#### ! { *predicate* }\n\nThe predicate is a piece of JavaScript code that is executed as if it was inside\na function. It gets the match results of labeled expressions in preceding\nexpression as its arguments. It should return some JavaScript value using the\n`return` statement. If the returned value evaluates to `false` in boolean\ncontext, just return `undefined` and do not advance the parser position;\notherwise consider the match failed.\n\nThe code inside the predicate can access all variables and functions defined in\nthe initializer at the beginning of the grammar.\n\nThe code inside the predicate can also access location information using the\n`location` function. It returns an object like this:\n\n    {\n      start: { offset: 23, line: 5, column: 6 },\n      end:   { offset: 23, line: 5, column: 6 }\n    }\n\nThe `start` and `end` properties both refer to the current parse position. The\n`offset` property contains an offset as a zero-based index and `line` and\n`column` properties contain a line and a column as one-based indices.\n\nThe code inside the predicate can also access the parser object using the\n`parser` variable and options passed to the parser using the `options` variable.\n\nNote that curly braces in the predicate code must be balanced.\n\n#### $ *expression*\n\nTry to match the expression. If the match succeeds, return the matched string\ninstead of the match result.\n\n#### *label* : *expression*\n\nMatch the expression and remember its match result under given label. The label\nmust be a JavaScript identifier.\n\nLabeled expressions are useful together with actions, where saved match results\ncan be accessed by action's JavaScript code.\n\n#### *expression<sub>1</sub>* *expression<sub>2</sub>* ...  *expression<sub>n</sub>*\n\nMatch a sequence of expressions and return their match results in an array.\n\n#### *expression* { *action* }\n\nMatch the expression. If the match is successful, run the action, otherwise\nconsider the match failed.\n\nThe action is a piece of JavaScript code that is executed as if it was inside a\nfunction. It gets the match results of labeled expressions in preceding\nexpression as its arguments. The action should return some JavaScript value\nusing the `return` statement. This value is considered match result of the\npreceding expression.\n\nTo indicate an error, the code inside the action can invoke the `expected`\nfunction, which makes the parser throw an exception. The function takes one\nparameter — a description of what was expected at the current position. This\ndescription will be used as part of a message of the thrown exception.\n\nThe code inside an action can also invoke the `error` function, which also makes\nthe parser throw an exception. The function takes one parameter — an error\nmessage. This message will be used by the thrown exception.\n\nThe code inside the action can access all variables and functions defined in the\ninitializer at the beginning of the grammar. Curly braces in the action code\nmust be balanced.\n\nThe code inside the action can also access the string matched by the expression\nusing the `text` function.\n\n\nThe code inside the action can also access location information using the\n`location` function. It returns an object like this:\n\n    {\n      start: { offset: 23, line: 5, column: 6 },\n      end:   { offset: 25, line: 5, column: 8 }\n    }\n\nThe `start` property refers to the position at the beginning of the expression,\nthe `end` property refers to position after the end of the expression. The\n`offset` property contains an offset as a zero-based index and `line` and\n`column` properties contain a line and a column as one-based indices.\n\nThe code inside the action can also access the parser object using the `parser`\nvariable and options passed to the parser using the `options` variable.\n\nNote that curly braces in the action code must be balanced.\n\n#### *expression<sub>1</sub>* / *expression<sub>2</sub>* / ... / *expression<sub>n</sub>*\n\nTry to match the first expression, if it does not succeed, try the second one,\netc. Return the match result of the first successfully matched expression. If no\nexpression matches, consider the match failed.\n\nRule parameter syntax\n---------------------\n\nWikiPEG supports passing parameters to rules. This is an extension compared to\nPEG.js.\n\nAll parameters referenced in the grammar have an initial value and can\nbe used before their first assignment.\n\nParameters have a type detected at compile time: boolean, integer,\nstring or reference. Initial values for each type are:\n  - boolean: false\n  - integer: 0\n  - string: \"\"\n  - reference: null\n\nThe parameter namespace is global, but the value of a parameter reverts\nto its previous value after termination of the assigning rule reference.\n\nThe syntax is as follows:\n\n#### & < *parameter* >\n\nAssert that the parameter \"x\" is true or nonzero\n\n#### ! < *parameter* >\n\nAssert that the parameter \"x\" is false or zero\n\n#### *rule* < *parameter* = true >\n\nMatch a parsing expression of a rule recursively, and assign *parameter* to\nboolean true in *rule* and its callees.\n\n#### *rule* < *parameter* = false >\n\nAssign parameter \"x\" to false.\n\n#### *rule* < *parameter* >\n\nShortcut for rule<parameter=true>.\n\n#### *rule* < *parameter* = 0 >\n\nInteger assignment.\n\n#### *rule* < *parameter* ++ >\n\nAssign x = x + 1.\n\n#### *rule* < *parameter* = \"*literal*\" >\n\nString assignment.\n\n#### *rule* < & *parameter* = 1 >\n\nCreate a reference (in/out) parameter and give it an initial value of 1.\n\nNote that it is illegal to assign to a reference parameter using non-reference\nsyntax.\n\n#### *variable* : < *parameter* >\n\nExpose value of parameter \"x\" as variable \"v\" in JS action or predicate code.\n\nThe value of a reference parameter can be exposed to JS as an ordinary rvalue\nin this way: assigning to it will have no effect outside the action in question.\n\n#### *variable* : < & *parameter* >\n\nIn JS this will expose the reference parameter \"r\" as an object with r.set(),\nr.get(). In PHP it will be a native reference such that {$r = 1;} will set\nthe value of the reference in the declaration scope.\n\nRequirements\n-------------\n\n* Node.js 6 or later\n\nDevelopment\n-----------\n\nDevelopment occurs in the \"wikipeg\" project in [Wikimedia's Gerrit](https://www.mediawiki.org/wiki/Gerrit).\n\nBugs should be reported to [Wikimedia's Phabricator](https://phabricator.wikimedia.org/)\n\nWikiPEG is a derivative of PEG.js by David Majda.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "https://gerrit.wikimedia.org/r/wikipeg"
  },
  "scripts": {
    "eslint": "make eslint",
    "test": "make eslint && make spec"
  },
  "version": "2.0.1"
}