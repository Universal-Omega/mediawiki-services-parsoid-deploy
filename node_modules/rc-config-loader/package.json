{
  "author": {
    "name": "azu"
  },
  "bugs": {
    "url": "https://github.com/azu/rc-config-loader/issues"
  },
  "dependencies": {
    "debug": "^3.1.0",
    "js-yaml": "^3.12.0",
    "json5": "^1.0.1",
    "object-assign": "^4.1.0",
    "object-keys": "^1.0.12",
    "path-exists": "^3.0.0",
    "require-from-string": "^2.0.2"
  },
  "description": "load config file from .{product}rc.{json,yml,js}",
  "devDependencies": {
    "babel-cli": "^6.22.2",
    "babel-preset-jsdoc-to-assert": "^4.0.0",
    "babel-preset-latest": "^6.22.0",
    "babel-preset-power-assert": "^1.0.0",
    "babel-register": "^6.22.0",
    "chai": "^3.5.0",
    "cross-env": "^3.1.4",
    "eslint": "^3.15.0",
    "husky": "^0.14.3",
    "lint-staged": "^5.0.0",
    "mocha": "^3.2.0",
    "power-assert": "^1.4.2",
    "prettier": "^1.8.2"
  },
  "directories": {
    "test": "test"
  },
  "files": [
    "bin/",
    "lib/",
    "src/"
  ],
  "homepage": "https://github.com/azu/rc-config-loader",
  "keywords": [
    "rc",
    "config",
    "configuration",
    "loader",
    "json",
    "yaml",
    "yml"
  ],
  "license": "MIT",
  "lint-staged": {
    "*.{js,jsx,ts,tsx,css}": [
      "prettier --write",
      "git add"
    ]
  },
  "main": "lib/rc-config-loader.js",
  "name": "rc-config-loader",
  "optionalDependencies": {},
  "prettier": {
    "printWidth": 120,
    "tabWidth": 4
  },
  "readme": "# rc-config-loader [![Build Status](https://travis-ci.org/azu/rc-config-loader.svg?branch=master)](https://travis-ci.org/azu/rc-config-loader)\n\nLoad config from `.{product}rc.{json,yml,js}` file.\n\nIt is a Node.js library for loading `.textlintrc`, `.eslintrc`, `.stylelintrc` etc...\n\n## Features\n\nFind and load a configuration object from:\n\n- a `package.json` property if it is needed\n- a JSON or YAML, JS \"rc file\"\n    - `.<product>rc` or `.<product>rc.json` or `.<product>rc.js` or`.<product>rc.yml`, `.<product>rc.yaml`\n- TypeScript support\n    - Include `.d.ts`\n\n## Difference\n\n### with [MoOx/rc-loader](https://github.com/MoOx/rc-loader \"MoOx/rc-loader\")\n\n- Safe API\n    - `rc` contains shabang in `.js` file\n- Enhance Error message\n\n### with [cosmiconfig](https://github.com/davidtheclark/cosmiconfig \"cosmiconfig\")\n\n- Sync loading\n\n## Install\n\nInstall with [npm](https://www.npmjs.com/):\n\n    npm install rc-config-loader\n\n## Usage\n\n### API\n\n```ts\nexport interface rcConfigLoaderOption {\n    // does look for `package.json`\n    packageJSON?: boolean,\n    // if config file name is not same with packageName, set the name\n    configFileName?: string;\n    // treat default(no ext file) as some extension\n    defaultExtension?: string | string[],\n    // where start to load\n    cwd?: string;\n}\nexport default function rcConfigLoader(packageName: string, options?: rcConfigLoaderOption): Object;\n```\n\n`rcConfigLoader` return `{ config, filePath }` object.\n\n- `config`: it is config object\n- `filePath`: absolute path to config file\n\nIf not found config file, return `undefined`.\n\n### Example\n\n```js\n\"use strict\";\nconst rcfile = require(\"rc-config-loader\");\n// load .eslintrc from current dir\nconsole.log(rcfile(\"eslint\"));\n\n// load .eslintrc from specific path\nconsole.log(rcfile(\"eslint\", {\n    configFileName: `${__dirname}/test/fixtures/.eslintrc`\n}));\n/*\nconfig: { extends: 'standard',\n  rules:\n   { 'comma-dangle': [ 2, 'always-multiline' ],\n     'arrow-parens': [ 2, 'as-needed' ] } }\nfilePath: ${__dirname}/test/fixtures/.eslintrc\n */\n\n// load property from pacakge.json\nconsole.log(rcfile(\"rc-config-loader\", {\n    packageJSON: {\n        fieldName: \"directories\"\n    }\n}));\n/*\nconfig: { test: 'test' }\nfilePath: /path/to/package.json\n */\n\n// load .eslintrc from specific dir\nconsole.log(rcfile(\"eslint\", {\n    cwd: `${__dirname}/test/fixtures`\n}));\n\n// load specific filename from current dir\nconsole.log(rcfile(\"travis\", {configFileName: \".travis\"}));\n/*\nconfig: { sudo: false, language: 'node_js', node_js: 'stable' }\nfilePath: /path/to/.travis\n */\n\n// try to load as .json, .yml, js\nconsole.log(rcfile(\"bar\", {\n    configFileName: `${__dirname}/test/fixtures/.barrc`,\n    defaultExtension: [\".json\", \".yml\", \".js\"]\n}));\n\n// try to load as .yml, but it is not json\n// throw Error\ntry {\n    rcfile(\"unknown\", {\n        // This is not json\n        configFileName: `${__dirname}/test/fixtures/.unknownrc`,\n        defaultExtension: \".json\"\n    })\n} catch (error) {\n    console.log(error);\n    /*\n    SyntaxError: Cannot read config file: /test/fixtures/.unknownrc\n    */\n}\n\n```\n\n## Users\n\n- [textlint](https://github.com/textlint/textlint \"textlint\")\n\n## Changelog\n\nSee [Releases page](https://github.com/azu/rc-config-loader/releases).\n\n## Running tests\n\nInstall devDependencies and Run `npm test`:\n\n    npm i -d && npm test\n\n## Contributing\n\nPull requests and stars are always welcome.\n\nFor bugs and feature requests, [please create an issue](https://github.com/azu/rc-config-loader/issues).\n\n1. Fork it!\n2. Create your feature branch: `git checkout -b my-new-feature`\n3. Commit your changes: `git commit -am 'Add some feature'`\n4. Push to the branch: `git push origin my-new-feature`\n5. Submit a pull request :D\n\n## Author\n\n- [github/azu](https://github.com/azu)\n- [twitter/azu_re](https://twitter.com/azu_re)\n\n## License\n\nMIT Â© azu\n\n## Acknowledgement\n\n- [zkochan/rcfile: Loads library configuration in all possible ways](https://github.com/zkochan/rcfile \"zkochan/rcfile: Loads library configuration in all possible ways\")\n\n**Difference**\n\n- support multiple `defaultExtension`  \n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/azu/rc-config-loader.git"
  },
  "scripts": {
    "build": "cross-env NODE_ENV=production babel src --out-dir lib --copy-files --source-maps",
    "postcommit": "git reset",
    "precommit": "lint-staged",
    "prepublish": "npm run --if-present build",
    "prettier": "prettier --write '**/*.{js,jsx,ts,tsx,css}'",
    "test": "mocha test/",
    "watch": "babel src --out-dir lib --watch --source-maps"
  },
  "version": "2.0.2"
}