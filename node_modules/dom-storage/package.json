{
  "author": {
    "name": "AJ ONeal",
    "email": "coolaj86@gmail.com",
    "url": "https://coolaj86.com"
  },
  "dependencies": {},
  "description": "W3C DOM Storage (localStorage and sessionStorage) for node.js",
  "devDependencies": {},
  "engines": {
    "node": "*"
  },
  "homepage": "https://git.coolaj86.com/coolaj86/dom-storage.js",
  "license": "(MIT or Apache-2.0)",
  "main": "lib/index.js",
  "name": "dom-storage",
  "optionalDependencies": {},
  "readme": "sessionStorage & localStorage for NodeJS\n===\n\n| **dom-storage**\n| [atob](https://git.coolaj86.com/coolaj86/atob.js)\n| [btoa](https://git.coolaj86.com/coolaj86/btoa.js)\n| [unibabel.js](https://git.coolaj86.com/coolaj86/unibabel.js)\n| Sponsored by [ppl](https://ppl.family)\n\n\nAn inefficient, but as W3C-compliant as possible using only pure JavaScript, `DOMStorage` implementation.\n\nPurpose\n----\n\nThis is meant for the purpose of being able to run unit-tests and such for browser-y modules in node.\n\nUsage\n----\n\n```javascript\nvar Storage = require('dom-storage');\n\n// in-file, doesn't call `String(val)` on values (default)\nvar localStorage = new Storage('./db.json', { strict: false, ws: '  ' });\n\n// in-memory, does call `String(val)` on values (i.e. `{}` becomes `'[object Object]'`\nvar sessionStorage = new Storage(null, { strict: true });\n\nvar myValue = { foo: 'bar', baz: 'quux' };\n\nlocalStorage.setItem('myKey', myValue);\nmyValue = localStorage.getItem('myKey');\n\n// use JSON to stringify / parse when using strict w3c compliance\nsessionStorage.setItem('myKey', JSON.stringify(myValue));\nmyValue = JSON.parse(localStorage.getItem('myKey'));\n```\n\nAPI\n---\n\n  * getItem(key)\n  * setItem(key, value)\n  * removeItem(key)\n  * clear()\n  * key(n)\n  * length\n\n### Options\n\n  * strict - whether to stringify strictly as text `[Object object]` or as json `{ foo: bar }`.\n  * ws - the whitespace to use saving json to disk. Defaults to `'  '`.\n\nTests\n---\n\n```javascript\n0 === localStorage.length;\nnull === localStorage.getItem('doesn\\'t exist');\nundefined === localStorage['doesn\\'t exist'];\n\nlocalStorage.setItem('myItem');\n'undefined' === localStorage.getItem('myItem');\n1 === localStorage.length;\n\nlocalStorage.setItem('myItem', 0);\n'0' === localStorage.getItem('myItem');\n\nlocalStorage.removeItem('myItem', 0);\n0 === localStorage.length;\n\nlocalStorage.clear();\n0 === localStorage.length;\n```\n\nNotes\n---\n\n  * db is read in synchronously\n  * No callback when db is saved\n  * Doesn't not emit `Storage` events (not sure how to do)\n\nLicense\n-------\n\nCode copyright 2012-2018 AJ ONeal\n\nDual-licensed MIT and Apache-2.0\n\nDocs copyright 2012-2018 AJ ONeal\n\nDocs released under Creative Commons.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://git.coolaj86.com/coolaj86/dom-storage.js.git"
  },
  "version": "2.1.0"
}