{
  "author": {
    "name": "Kuniwak",
    "email": "orga.chem.job@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/Kuniwak/jsdoctypeparser/issues"
  },
  "dependencies": {},
  "description": "Strict JsDoc type expression parser.",
  "devDependencies": {
    "chai": "^2.2.0",
    "eslint": "^0.20.0",
    "mkdirp": "^0.5.1",
    "mocha": "^2.2.4",
    "npm-run-all": "^2.1.0",
    "pegjs": "^0.9.0",
    "rimraf": "^2.5.2"
  },
  "directories": {
    "test": "test"
  },
  "homepage": "https://github.com/Kuniwak/jsdoctypeparser#readme",
  "keywords": [
    "jsdoc",
    "type expression",
    "parser"
  ],
  "license": "MIT",
  "main": "index.js",
  "name": "jsdoctypeparser",
  "optionalDependencies": {},
  "readme": "jsdoctypeparser\n===============\n\n[![Build Status](https://travis-ci.org/Kuniwak/jsdoctypeparser.svg?branch=master)](https://travis-ci.org/Kuniwak/jsdoctypeparser)\n[![NPM version](https://badge.fury.io/js/jsdoctypeparser.svg)](http://badge.fury.io/js/jsdoctypeparser)\n\nThe parser can parse:\n\n* [JSDoc type expressions](http://usejsdoc.org/tags-type.html)\n  * `foo.bar`, `String[]`\n* [Closure Compiler type expressions](https://developers.google.com/closure/compiler/docs/js-for-compiler)\n  * `Array<string>`, `function(arg1, arg2): ret`\n* [JSDuck type definitions](https://github.com/senchalabs/jsduck/wiki/Type-Definitions)\n  * `Boolean/\"top\"/\"bottom\"`\n* Complex type expressions\n  * `Array<Array<string>>`, `function(function(Function))`\n\n\nLive demo\n---------\n\nThe [live demo](http://kuniwak.github.io/jsdoctypeparser/) is available.\n\n\nUsage\n-----\n\n### Parsing\n\n```javascript\nvar parse = require('jsdoctypeparser').parse;\n\nvar ast = parse('Array<MyClass>');\n```\n\nThe `ast` becomes:\n\n```json\n{\n  \"type\": \"GENERIC\",\n  \"subject\": {\n    \"type\": \"NAME\",\n    \"name\": \"Array\"\n  },\n  \"objects\": [\n    {\n      \"type\": \"NAME\",\n      \"name\": \"MyClass\"\n    }\n  ],\n  \"meta\": {\n    \"syntax\": \"ANGLE_BRACKET\"\n  }\n}\n```\n\nSee the [AST specifications](https://github.com/Kuniwak/jsdoctypeparser/blob/update-readme/README.md#ast-specifications).\n\n\n### Publishing\n\nWe can stringify the AST nodes by using `publish`.\n\n```javascript\nvar publish = require('jsdoctypeparser').publish;\n\nvar ast = {\n  type: 'GENERIC',\n  subject: {\n    type: 'NAME',\n    name: 'Array'\n  },\n  objects: [\n    {\n      type: 'NAME',\n      name: 'MyClass'\n    }\n  ]\n};\n\nvar string = publish(ast);\n```\n\nThe `string` becomes:\n\n```json\n\"Array<MyClass>\"\n```\n\n\n#### Custom publishing\n\nWe can change the stringification strategy by using the 2nd parameter of `publish(node, publisher)`.\nThe `publisher` MUST have handlers for all node types (see `lib/NodeType.js`).\n\nAnd we can override default behavior by using `createDefaultPublisher`.\n\n\n```javascript\nconst {publish, createDefaultPublisher} = require('jsdoctypeparser');\n\nconst ast = {\n  type: 'NAME',\n  name: 'MyClass',\n};\n\nconst customPublisher = createDefaultPublisher();\ncustomPublisher.NAME = (node, pub) => \n  `<a href=\"./types/${node.name}.html\">${node.name}</a>`;\n\nconst string = publish(ast, customPublisher);\n```\n\nThe `string` becomes:\n\n```html\n<a href=\"./types/MyClass.html\">MyClass</a>\n```\n\n\n### Traversing\n\nWe can traverse the AST by using `traverse`.\nThis function takes 3 parameters (a node and an onEnter handler, an onLeave handler).\nThe handlers take a visiting node.\n\n```javascript\nconst {parse, traverse} = require('jsdoctypeparser');\nconst ast = parse('Array<{ key1: function(), key2: A.B.C }>');\n\nfunciton onEnter(node) {\n  console.log('enter', node.type);\n}\n\nfunciton onLeave(node) {\n  console.log('leave', node.type);\n}\n\ntraverse(ast, onEnter, onLeave);\n```\n\nThe output will be:\n\n```\nenter GENERIC\nenter RECORD\nenter RECORD_ENTRY\nenter FUNCTION\nleave FUNCTION\nleave RECORD_ENTRY\nenter RECORD_ENTRY\nenter MEMBER\nenter MEMBER\nenter NAME\nleave NAME\nleave MEMBER\nleave MEMBER\nleave RECORD_ENTRY\nleave RECORD\nleave GENERIC\n```\n\n\nAST Specifications\n------------------\n\n### `NAME`\n\nExample:\n\n```javascript\n/**\n * @type {name}\n */\n```\n\nStructure:\n\n```javascript\n{\n  \"type\": \"NAME\",\n  \"name\": string\n}\n```\n\n\n### `MEMBER`\n\nExample:\n\n```javascript\n/**\n * @type {owner.name}\n * @type {superOwner.owner.name}\n */\n```\n\nStructure:\n\n```javascript\n{\n  \"type\": \"MEMBER\",\n  \"name\": string,\n  \"owner\": node\n}\n```\n\n\n### `INNER_MEMBER`\n\nExample:\n\n```javascript\n/**\n * @type {owner~name}\n */\n```\n\nStructure:\n\n```javascript\n{\n  \"type\": \"INNER_MEMBER\",\n  \"name\": string,\n  \"owner\": node\n}\n```\n\n\n\n### `INSTANCE_MEMBER`\n\nExample:\n\n```javascript\n/**\n * @type {owner#name}\n */\n```\n\nStructure:\n\n```javascript\n{\n  \"type\": \"INSTANCE_MEMBER\",\n  \"name\": string,\n  \"owner\": node\n}\n```\n\n\n### `UNION`\n\nExample:\n\n```javascript\n/**\n * @type {left|right}\n * @type {(left|right)}\n * @type {left/right}\n */\n```\n\nStructure:\n\n```javascript\n{\n  \"type\": \"UNION\",\n  \"left\": node,\n  \"right\": node,\n  \"meta\": {\n    \"syntax\": (\"PIPE\" or \"SLASH\")\n  }\n}\n```\n\n\n### `RECORD`\n\nExample:\n\n```javascript\n/**\n * @type {{}}\n * @type {{ key: value }}\n * @type {{ key: value, anyKey }}\n */\n```\n\nStructure:\n\n```javascript\n{\n  \"type\": \"RECORD\",\n  \"entries\": [\n    recordEntryNode,\n    recordEntryNode,\n    ...\n  ]\n}\n```\n\n\n### `RECORD_ENTRY`\n\nStructure:\n\n```javascript\n{\n  \"type\": \"RECORD_ENTRY\",\n  \"key\": string,\n  \"value\": node (or null)\n}\n```\n\n\n### `GENERIC`\n\nExample:\n\n```javascript\n/**\n * @type {Subject<Object, Object>}\n * @type {Object[]}\n */\n```\n\nStructure:\n\n```javascript\n{\n  \"type\": \"GENERIC\",\n  \"subject\": node,\n  \"objects\": [\n    node,\n    node,\n    ...\n  ],\n  \"meta\": {\n    \"syntax\": (\"ANGLE_BRACKET\" or \"ANGLE_BRACKET_WITH_DOT\" or \"SQUARE_BRACKET\")\n  }\n}\n```\n\n\n### `FUNCTION`\n\nExample:\n\n```javascript\n/**\n * @type {function()}\n * @type {function(param, param): return}\n * @type {function(this: Context)}\n * @type {function(new: Class)}\n */\n```\n\nStructure:\n\n```javascript\n{\n  \"type\": \"FUNCTION\",\n  \"params\": [\n    node,\n    node,\n    ...\n  ],\n  \"returns\": node (or null),\n  \"new\": node (or null),\n  \"this\": node (or null)\n}\n```\n\n\n### `OPTIONAL`\n\nExample:\n\n```javascript\n/**\n * @type {Optional=}\n */\n```\n\nStructure:\n\n```javascript\n{\n  \"type\": \"OPTIONAL\",\n  \"value\": node,\n  \"meta\": {\n    \"syntax\": (\"PREFIX_EQUALS_SIGN\" or \"SUFFIX_EQUALS_SIGN\")\n  }\n}\n```\n\n\n### `NULLABLE`\n\nExample:\n\n```javascript\n/**\n * @type {?Nullable}\n */\n```\n\nStructure:\n\n```javascript\n{\n  \"type\": \"NULLABLE\",\n  \"value\": node,\n  \"meta\": {\n    \"syntax\": (\"PREFIX_QUESTION_MARK\" or \"SUFFIX_QUESTION_MARK\")\n  }\n}\n```\n\n\n### `NOT_NULLABLE`\n\nExample:\n\n```javascript\n/**\n * @type {!NotNullable}\n */\n```\n\nStructure:\n\n```javascript\n{\n  \"type\": \"NOT_NULLABLE\",\n  \"value\": node,\n  \"meta\": {\n    \"syntax\": (\"PREFIX_BANG\" or \"SUFFIX_BANG\")\n  }\n}\n```\n\n\n### `VARIADIC`\n\nExample:\n\n```javascript\n/**\n * @type {...Variadic}\n * @type {Variadic...}\n * @type {...}\n */\n```\n\nStructure:\n\n```javascript\n{\n  \"type\": \"VARIADIC\",\n  \"value\": node (or null),\n  \"meta\": {\n    \"syntax\": (\"PREFIX_DOTS\" or \"SUFFIX_DOTS\" or \"ONLY_DOTS\")\n  }\n}\n```\n\n\n### `MODULE`\n\nExample:\n\n```javascript\n/**\n * @type {module:path/to/file.Module}\n */\n```\n\nStructure:\n\n```javascript\n{\n  \"type\": \"MODULE\",\n  \"value\": node\n}\n```\n\n\n### `FILE_PATH`\n\nExample:\n\n```javascript\n/**\n * @type {module:path/to/file.Module}\n *               ^^^^^^^^^^^^\n */\n```\n\nStructure:\n\n```javascript\n{\n  \"type\": \"FILE_PATH\",\n  \"path\": string\n}\n```\n\n\n### `EXTERNAL`\n\nExample:\n\n```javascript\n/**\n * @type {external:External}\n */\n```\n\nStructure:\n\n```javascript\n{\n  \"type\": \"EXTERNAL\",\n  \"value\": node\n}\n```\n\n\n### `STRING_VALUE`\n\nExample:\n\n```javascript\n/**\n * @type {\"abc\"}\n * @type {\"can\\\"escape\"}\n */\n```\n\nStructure:\n\n```javascript\n{\n  \"type\": \"STRING_VALUE\",\n  \"string\": string\n}\n```\n\n\n### `NUMBER_VALUE`\n\nExample:\n\n```javascript\n/**\n * @type {123}\n * @type {0b11}\n * @type {0o77}\n * @type {0xff}\n */\n```\n\nStructure:\n\n```javascript\n{\n  \"type\": \"NUMBER_VALUE\",\n  \"number\": string\n}\n```\n\n\n### `ANY`\n\nExample:\n\n```javascript\n/**\n * @type {*}\n */\n```\n\nStructure:\n\n```javascript\n{\n  \"type\": \"ANY\"\n}\n```\n\n\n### `UNKNOWN`\n\nExample:\n\n```javascript\n/**\n * @type {?}\n */\n```\n\nStructure:\n\n```javascript\n{\n  \"type\": \"UNKNOWN\"\n}\n```\n\n\n### `PARENTHESIS`\n\nExample:\n\n```javascript\n/**\n * @type {(Foo)}\n */\n```\n\nStructure:\n\n```javascript\n{\n  \"type\": \"PARENTHESIS\",\n  \"value\": node\n}\n```\n\n\n\n### Others\n\nWe can use a parenthesis to change operator orders.\n\n```javascript\n/**\n * @type {(module:path/to/file.js).foo}\n */\n```\n\n\nLicense\n-------\n\n[This script licensed under the MIT](http://kuniwak.mit-license.org).\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/Kuniwak/jsdoctypeparser.git"
  },
  "scripts": {
    "build": "pegjs --cache ./peg_src/jsdoctype.pegjs ./peg_lib/jsdoctype.js",
    "clean": "rimraf ./peg_lib",
    "lint": "eslint lib tests",
    "postclean": "mkdirp ./peg_lib",
    "prebuild": "npm-run-all clean",
    "prepublidh": "npm-run-all build",
    "pretest": "npm-run-all lint build",
    "test": "mocha tests"
  },
  "version": "2.0.0-alpha-8"
}